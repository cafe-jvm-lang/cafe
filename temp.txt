D:\Dhyey\compiler\compiler-project\build\classes\java\main

ObjectPrototype{
	Map<key,value>  = [];
	Map.put(__proto__ , null)
}
DynamicObject {
	private prototype = ObjectPrototype()
	
	Map<key,value>  = [];
	Map.put("__proto__",prototype)
	
	static create(){
		
	}
}

var x = {a:10}
x.__proto__ == DynamicObject.prototype

FunctionPrototype{
	Map<key,value>  = [];
	Map.put("__proto__" , ObjectPrototype())
}
Function extends DynamicObject{
	Map<key,value>  = [];
	Map.put("prototype" , FunctionPrototype)
	Map.put("__proto__",Map.get("prototype"))
}
func A(){
	this.x = func(){};
}

A.someMethod = func(){
	this.hello =  func(){
		return x;
	}
}
func B(){
	this.x = 10;
}
B.prototype = DO.delegate(A)


every func is an instance of Function


function foo() {
	console.log( this.a );
}

var obj1 = { a:42 }

var obj2 = Do.delegate(obj1)


------------------------------------------------


a = 10;
a.b = 100;
a.b().c = 100;
a.b.c[d] = 100;
a.b.c[d][e] = 100;	
a.b.c()[d] = 100;

a.b.c()	()

println.a = 5;

algo: if var isnt resolved
		1. search import
			1. Var found
				1. return var
				2. add var to GlobalThis
				

someFunc({1:2, 2:3});


if(a > 10){
    a = 11;
    var b = 10;
}
else {
    a = 12;
}

init func

-----------------------------------------------
SEMANTICS
1. Local scope variable checking
2. LHS checking
3. Loop collection-type checking
4. Range checking

1. Local scope variable checking
	SymbolTable
		1. Global Scope
		2. func
		
		structure:
			parent SymbolTable
			Set<Identifier>
			
			void insert(Identifier)
			boolean present(Identifier)
		
		Algo:
			1. create GlobalSymbolTable(GST) & CurrentSymbolTable(CST).
				init CST = GST
			2. iterate stmts.
			3. If stmt type = funcDecl:
				create new SymbolTable
					1. set parent = CST
					2. CST = this
				iterate through func stmt till method exists
				reset CST = CST.parent
			4.  if stmt type = VarDecl 
					cst.insert(identifier):
				else other ExprNodes with identifiers:
					cst.present(identifier)

2. LHS checking:
	LHS shouldnt consist:
		1. FuncCallNode
		2. Literal Nodes
		3. null & this nodes
		4. ExprNodes with operations like +,- etc.
		
	
3. Loop collection type checking
	Loop node collection expr shouldnt consist of:
		1. Literal Nodes
		2. null & this nodes

4. Range Checking
	Both nodes in range ie start & end, should be
		1. NumLit or String Lit
		2. both of same type.

structure for
class SemanticsChecker implements Node.Visitor{
	private final GST = new SymbolTable(parent=null),
	
	private static final enum Expr {
		LHS,
		LOOP_COLL,
		RANGE,
		NONE
	}
	
	private exprType = { Expr }
	
	// this node is set while visiting calling accept() on specific node,
	// to refer the type of caller.
	private Node.Tag callerNode = null;
}

---------------------------------------------------

DynamicObject.__proto__ = ObjectPrototype
Function.__proto__ = FunctionPrototype

FunctionPrototype.__proto__ = ObjectPrototype
ObjectPrototype.__proto__ = null

1. ObjectPrototype
	Methods common to all Objects should be declared in ObjectPrototype
	List of methods:
	
2. DynamicObject
	An Object created by user

3. Function
	A Function created by user

4. FunctionPrototype
	A shared pool for functional inheritence
	
	
	
JAVASCRIPT prototype design:
Object.prototype
{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}
Object.__proto__.__proto__ == Object.prototype
true
Function.__proto__.__proto__ == Function.prototype
false
Function.__proto__ == Function.prototype
true

Object.__proto__ == Function.prototype
true
Function.prototype.__proto__
{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}
Function.prototype.__proto__ == Object.__proto__.__proto__
true
var a = {}
undefined
a.__proto__ == Function.prototype
false
Object
ƒ Object() { [native code] }
Object()
{}__proto__: Object
var a = new Object()
undefined
a.__proto__ == Function.prototype
false
Object.prototype == Function.__proto__
false

----------------------------
func b(){

}
func c(){
    return "hello";
}

b.prototype.z  = c;
var a = $_create(b.prototype);
print(a.z);