package compiler.codegen.assembly;

import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.IF_ICMPGE;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.NEW;
import static org.objectweb.asm.Opcodes.POP;
import static org.objectweb.asm.Opcodes.PUTSTATIC;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

public class Bootstrapper {
	final ClassWriter cw;
	MethodVisitor mv;
	public Bootstrapper(final ClassWriter cw) {
		this.cw = cw;
	}
	
	void bootstrap() {
		{
			mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, "bootstrapDynamic", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", null, new String[] { "java/lang/IllegalAccessException", "java/lang/NoSuchMethodException" });
			mv.visitCode();
			Label label0 = new Label();
			mv.visitLabel(label0);
			mv.visitLineNumber(41, label0);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/invoke/MethodHandles", "lookup", "()Ljava/lang/invoke/MethodHandles$Lookup;", false);
			mv.visitVarInsn(ASTORE, 3);
			Label label1 = new Label();
			mv.visitLabel(label1);
			mv.visitLineNumber(47, label1);
			mv.visitTypeInsn(NEW, "java/util/ArrayList");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
			mv.visitVarInsn(ASTORE, 4);
			Label label2 = new Label();
			mv.visitLabel(label2);
			mv.visitLineNumber(48, label2);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ISTORE, 5);
			Label label3 = new Label();
			mv.visitLabel(label3);
			mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/invoke/MethodHandles$Lookup", "java/util/List", Opcodes.INTEGER}, 0, null);
			mv.visitVarInsn(ILOAD, 5);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodType", "parameterCount", "()I", false);
			Label label4 = new Label();
			mv.visitJumpInsn(IF_ICMPGE, label4);
			Label label5 = new Label();
			mv.visitLabel(label5);
			mv.visitLineNumber(49, label5);
			mv.visitVarInsn(ALOAD, 4);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
			mv.visitInsn(POP);
			Label label6 = new Label();
			mv.visitLabel(label6);
			mv.visitLineNumber(48, label6);
			mv.visitIincInsn(5, 1);
			mv.visitJumpInsn(GOTO, label3);
			mv.visitLabel(label4);
			mv.visitLineNumber(52, label4);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodType", "returnType", "()Ljava/lang/Class;", false);
			mv.visitVarInsn(ALOAD, 4);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/invoke/MethodType", "methodType", "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;", false);
			mv.visitVarInsn(ASTORE, 5);
			Label label7 = new Label();
			mv.visitLabel(label7);
			mv.visitLineNumber(54, label7);
			mv.visitTypeInsn(NEW, "java/util/ArrayList");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
			mv.visitVarInsn(ASTORE, 6);
			Label label8 = new Label();
			mv.visitLabel(label8);
			mv.visitLineNumber(55, label8);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ISTORE, 7);
			Label label9 = new Label();
			mv.visitLabel(label9);
			mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/invoke/MethodType", "java/util/List", Opcodes.INTEGER}, 0, null);
			mv.visitVarInsn(ILOAD, 7);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodType", "parameterCount", "()I", false);
			Label label10 = new Label();
			mv.visitJumpInsn(IF_ICMPGE, label10);
			Label label11 = new Label();
			mv.visitLabel(label11);
			mv.visitLineNumber(56, label11);
			mv.visitVarInsn(ALOAD, 6);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitVarInsn(ILOAD, 7);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodType", "parameterType", "(I)Ljava/lang/Class;", false);
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
			mv.visitInsn(POP);
			Label label12 = new Label();
			mv.visitLabel(label12);
			mv.visitLineNumber(55, label12);
			mv.visitIincInsn(7, 1);
			mv.visitJumpInsn(GOTO, label9);
			mv.visitLabel(label10);
			mv.visitLineNumber(59, label10);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, 5);
			mv.visitVarInsn(ALOAD, 6);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodType", "appendParameterTypes", "(Ljava/util/List;)Ljava/lang/invoke/MethodType;", false);
			mv.visitVarInsn(ASTORE, 5);
			Label label13 = new Label();
			mv.visitLabel(label13);
			mv.visitLineNumber(60, label13);
			mv.visitVarInsn(ALOAD, 3);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "lookupClass", "()Ljava/lang/Class;", false);
			mv.visitVarInsn(ASTORE, 7);
			Label label14 = new Label();
			mv.visitLabel(label14);
			mv.visitLineNumber(62, label14);
			mv.visitVarInsn(ALOAD, 3);
			mv.visitVarInsn(ALOAD, 7);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, 5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/invoke/MethodHandles$Lookup", "findStatic", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;", false);
			mv.visitFieldInsn(PUTSTATIC, "Callee", "hw", "Ljava/lang/invoke/MethodHandle;");
			Label label15 = new Label();
			mv.visitLabel(label15);
			mv.visitLineNumber(66, label15);
			mv.visitTypeInsn(NEW, "java/lang/invoke/ConstantCallSite");
			mv.visitInsn(DUP);
			mv.visitFieldInsn(GETSTATIC, "Callee", "hw", "Ljava/lang/invoke/MethodHandle;");
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/invoke/ConstantCallSite", "<init>", "(Ljava/lang/invoke/MethodHandle;)V", false);
			mv.visitInsn(ARETURN);
			mv.visitMaxs(4, 8);
			mv.visitEnd();
			}
	}
}
